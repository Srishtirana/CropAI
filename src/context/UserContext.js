import React, { createContext, useContext, useState, useEffect } from 'react';

const UserContext = createContext();

export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
};

export const UserProvider = ({ children }) => {
  const initialLang = typeof window !== 'undefined' ? (localStorage.getItem('lang') || 'hindi') : 'hindi';

  const [user, setUser] = useState(() => {
    const savedUser = typeof window !== 'undefined' ? localStorage.getItem('user') : null;
    return savedUser ? JSON.parse(savedUser) : {
      name: 'рд░рд╛рдо рдХреБрдорд╛рд░',
      phone: '+91 98765 43210',
      location: {
        displayName: 'рдордзреНрдп рдкреНрд░рджреЗрд╢, рднрд╛рд░рдд',
        coordinates: null,
        address: {}
      },
      farmSize: '5 рдПрдХрдбрд╝',
      language: initialLang
    };
  });

  const [language, setLanguage] = useState(initialLang);

  // Centralized translations for multi-language support
  const translations = {
    hindi: {
      appName: 'рдХреНрд░реЙрдкрдПрдЖрдИ',
      appSubtitle: 'рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо',
      welcome: 'рдирдорд╕реНрддреЗ',
      online: 'рдСрдирд▓рд╛рдЗрди',
      logout: 'рд▓реЙрдЧрдЖрдЙрдЯ',
      back: 'рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ',
      season: 'рдореМрд╕рдо',
      duration: 'рдЕрд╡рдзрд┐',
      water: 'рдкрд╛рдиреА',
      temp: 'рддрд╛рдкрдорд╛рди',
      yield: 'рдЙрдкрдЬ',
      care: 'рдЦреЗрддреА рдХреЗ рдирд┐рд░реНрджреЗрд╢',
      economics: 'рдЖрд░реНрдерд┐рдХ рдЬрд╛рдирдХрд╛рд░реА',
      marketPrice: 'рдмрд╛рдЬрд╛рд░ рдХреАрдордд',
      investment: 'рдирд┐рд╡реЗрд╢',
      expectedProfit: 'рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдн',
      chooseCrop: 'рдЗрд╕ рдлрд╕рд▓ рдХреЛ рдЪреБрдиреЗрдВ',
      viewOthers: 'рдЕрдиреНрдп рд╡рд┐рдХрд▓реНрдк рджреЗрдЦреЗрдВ',
      recentActivity: 'рд╣рд╛рд▓ рдХреА рдЧрддрд┐рд╡рд┐рдзрд┐рдпрд╛рдВ',
      farmSize: 'рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░',
      currentSeason: 'рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо',
      successRate: 'рд╕рдлрд▓рддрд╛ рджрд░',
    },
    english: {
      appName: 'CropAI',
      appSubtitle: 'Smart Farming Platform',
      welcome: 'Hello',
      online: 'Online',
      logout: 'Logout',
      back: 'Back',
      season: 'Season',
      duration: 'Duration',
      water: 'Water',
      temp: 'Temperature',
      yield: 'Yield',
      care: 'Care Instructions',
      economics: 'Economic Information',
      marketPrice: 'Market Price',
      investment: 'Investment',
      expectedProfit: 'Estimated Profit',
      chooseCrop: 'Choose this crop',
      viewOthers: 'View other options',
      recentActivity: 'Recent Activity',
      farmSize: 'Farm Size',
      currentSeason: 'Current Season',
      successRate: 'Success Rate',
    },
    marathi: {
      appName: 'рдХреНрд░реЙрдкрдПрдЖрдИ',
      appSubtitle: 'рд╕реНрдорд╛рд░реНрдЯ рд╢реЗрддреА рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо',
      welcome: 'рдирдорд╕реНрдХрд╛рд░',
      online: 'рдСрдирд▓рд╛рдЗрди',
      logout: 'рд▓реЙрдЧрдЖрдЙрдЯ',
      back: 'рдкрд░рдд рдЬрд╛',
      season: 'рд╣рдВрдЧрд╛рдо',
      duration: 'рдХрд╛рд▓рд╛рд╡рдзреА',
      water: 'рдкрд╛рдгреА',
      temp: 'рддрд╛рдкрдорд╛рди',
      yield: 'рдЙрддреНрдкрд╛рджрди',
      care: 'рд╢реЗрддреАрдЪреЗ рдирд┐рд░реНрджреЗрд╢',
      economics: 'рдЖрд░реНрдерд┐рдХ рдорд╛рд╣рд┐рддреА',
      marketPrice: 'рдмрд╛рдЬрд╛рд░ рднрд╛рд╡',
      investment: 'рдЧреБрдВрддрд╡рдгреВрдХ',
      expectedProfit: 'рдЕрдиреБрдорд╛рдирд┐рдд рдирдлрд╛',
      chooseCrop: 'рд╣реЗ рдкреАрдХ рдирд┐рд╡рдбрд╛',
      viewOthers: 'рдЗрддрд░ рдкрд░реНрдпрд╛рдп рдкрд╣рд╛',
      recentActivity: 'рдЕрд▓реАрдХрдбреАрд▓ рдХреНрд░рд┐рдпрд╛рдХрд▓рд╛рдк',
      farmSize: 'рд╢реЗрддрд╛рдЪрд╛ рдЖрдХрд╛рд░',
      currentSeason: 'рд╕рдзреНрдпрд╛рдЪрд╛ рд╣рдВрдЧрд╛рдо',
      successRate: 'рдпрд╢ рджрд░',
    },
    gujarati: {
      appName: 'ркХрлНрк░рлЛрккркПркЖркИ',
      appSubtitle: 'рк╕рлНркорк╛рк░рлНркЯ ркЦрлЗркдрлА рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко',
      welcome: 'ркиркорк╕рлНркдрлЗ',
      online: 'ркУркирк▓рк╛ркЗрки',
      logout: 'рк▓рлЛркЧркЖркЙркЯ',
      back: 'рккрк╛ркЫрк╛ ркЬрк╛ркУ',
      season: 'ркорлЛрк╕рко',
      duration: 'ркЕрк╡ркзрк┐',
      water: 'рккрк╛ркгрлА',
      temp: 'ркдрк╛рккркорк╛рки',
      yield: 'ркЙркдрлНрккрк╛ркжрки',
      care: 'ркХрк╛рк│ркЬрлА рк╕рлВркЪркирк╛ркУ',
      economics: 'ркЖрк░рлНркерк┐ркХ ркорк╛рк╣рк┐ркдрлА',
      marketPrice: 'ркмркЬрк╛рк░ ркнрк╛рк╡',
      investment: 'рк░рлЛркХрк╛ркг',
      expectedProfit: 'ркЕркВркжрк╛ркЬрк┐ркд ркирклрлЛ',
      chooseCrop: 'ркЖ рклрк╕рк▓ рккрк╕ркВркж ркХрк░рлЛ',
      viewOthers: 'ркЕркирлНркп рк╡рк┐ркХрк▓рлНрккрлЛ ркЬрлБркУ',
      recentActivity: 'ркдрк╛ркЬрлЗркдрк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐',
      farmSize: 'ркЦрлЗркдрк░ркирлБркВ ркХркж',
      currentSeason: 'рк╡рк░рлНркдркорк╛рки ркорлЛрк╕рко',
      successRate: 'рк╕рклрк│ркдрк╛ ркжрк░',
    }
  };

  const [recommendations, setRecommendations] = useState([]);
  const [alerts, setAlerts] = useState([
    {
      id: 1,
      title: 'рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА',
      titleEn: 'Weather Alert',
      titleMr: 'рд╣рд╡рд╛рдорд╛рди рдЪреЗрддрд╛рд╡рдгреА',
      titleGu: 'рк╣рк╡рк╛ркорк╛рки ркЪрлЗркдрк╡ркгрлА',
      message: 'рдЖрдЬ рд╢рд╛рдо рдХреЛ рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИ',
      messageEn: 'Rain expected this evening',
      messageMr: 'рдЖрдЬ рд╕рдВрдзреНрдпрд╛рдХрд╛рд│реА рдкрд╛рдКрд╕ рд╣реЛрдгреНрдпрд╛рдЪреА рд╢рдХреНрдпрддрд╛ рдЖрд╣реЗ',
      messageGu: 'ркЖркЬрлЗ рк╕рк╛ркВркЬрлЗ рк╡рк░рк╕рк╛ркжркирлА рк╢ркХрлНркпркдрк╛ ркЫрлЗ',
      priority: 'high',
      timestamp: new Date().toISOString()
    },
    {
      id: 2,
      title: 'рдХреАрдЯ рдкреНрд░рдмрдВрдзрди',
      titleEn: 'Pest Management',
      titleMr: 'рдХреАрдб рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди',
      titleGu: 'ркЬркВркдрлБ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки',
      message: 'рдЧреЗрд╣реВрдВ рдореЗрдВ рдХреАрдЯ рдХрд╛ рдЦрддрд░рд╛',
      messageEn: 'Pest threat in wheat crops',
      messageMr: 'рдЧрд╣реВ рдкрд┐рдХрд╛рдд рдХреАрдбрд╛рдВрдЪрд╛ рдзреЛрдХрд╛',
      messageGu: 'ркШркЙркВркирк╛ рккрк╛ркХркорк╛ркВ ркЬркВркдрлБркирлЛ ркЦркдрк░рлЛ',
      priority: 'medium',
      timestamp: new Date().toISOString()
    }
  ]);

  const changeLanguage = (lang) => {
    setLanguage(lang);
    setUser(prev => {
      const updatedUser = { ...prev, language: lang };
      if (typeof window !== 'undefined') {
        localStorage.setItem('user', JSON.stringify(updatedUser));
        localStorage.setItem('lang', lang);
      }
      return updatedUser;
    });
  };

  const updateUserLocation = async (locationData) => {
    const updatedUser = {
      ...user,
      location: locationData
    };
    setUser(updatedUser);
    if (typeof window !== 'undefined') {
      localStorage.setItem('user', JSON.stringify(updatedUser));
    }
    return updatedUser;
  };

  const updateUser = (newData) => {
    const updatedUser = { ...user, ...newData };
    setUser(updatedUser);
    if (typeof window !== 'undefined') {
      localStorage.setItem('user', JSON.stringify(updatedUser));
    }
    return updatedUser;
  };

  useEffect(() => {
    try {
      localStorage.setItem('lang', language);
    } catch (_) {}
  }, [language]);

  const t = translations[language] || translations.hindi;
  const languages = [
    { code: 'hindi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'english', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'marathi', name: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'gujarati', name: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' }
  ];

  const value = {
    user,
    language,
    changeLanguage,
    updateUserLocation,
    updateUser,
    t: translations[language]
  };

  return (
    <UserContext.Provider value={value}>
      {children}
    </UserContext.Provider>
  );
};
