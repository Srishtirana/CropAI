import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUser } from '../context/UserContext';
import { useDiagnosis } from '../context/DiagnosisContext';
import ImageUploader from './ImageUploader';
import DiagnosisHistory from './DiagnosisHistory';
import { 
  ArrowLeft, 
  Loader2, 
  AlertCircle, 
  CheckCircle, 
  Droplets, 
  Thermometer, 
  Cloud, 
  Sun,
  History,
  Lightbulb,
  AlertTriangle,
  SearchCheck
} from 'lucide-react';
import { useForm } from 'react-hook-form';
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { toast } from 'react-toastify';

// Form validation schema
const diagnosisSchema = yup.object().shape({
  cropType: yup.string().required('Crop type is required'),
  growthStage: yup.string().required('Growth stage is required'),
  soilType: yup.string().required('Soil type is required'),
  location: yup.string().required('Location is required')
});

const CropDiagnosis = () => {
  const { language, user } = useUser();
  const { addDiagnosis, findSimilar } = useDiagnosis();
  const navigate = useNavigate();
  const [imageFile, setImageFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');
  const [weatherData, setWeatherData] = useState(null);
  const [similarDiagnoses, setSimilarDiagnoses] = useState([]);
  const [showHistory, setShowHistory] = useState(false);
  
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(diagnosisSchema)
  });

  // Crop options
  const cropOptions = {
    english: ['Wheat', 'Rice', 'Corn', 'Soybean', 'Cotton', 'Potato', 'Tomato', 'Other'],
    hindi: ['गेहूं', 'चावल', 'मक्का', 'सोयाबीन', 'कपास', 'आलू', 'टमाटर', 'अन्य'],
    marathi: ['गहू', 'तांदूळ', 'मका', 'सोयाबीन', 'कापूस', 'बटाटा', 'टोमॅटो', 'इतर'],
    gujarati: ['ઘઉં', 'ચોખા', 'મકાઈ', 'સોયાબીન', 'કપાસ', 'બટાટા', 'ટામેટા', 'અન્ય']
  };

  // Growth stage options
  const growthStageOptions = {
    english: ['Seedling', 'Vegetative', 'Flowering', 'Fruiting', 'Mature', 'Harvest'],
    hindi: ['अंकुरण', 'वानस्पतिक', 'फूल आना', 'फल लगना', 'परिपक्व', 'कटाई'],
    marathi: ['अंकुरण', 'वनस्पतीची वाढ', 'फुलोरा', 'फळे येणे', 'परिपक्व', 'कापणी'],
    gujarati: ['અંકુરણ', 'વનસ્પતિ', 'ફૂલો આવવા', 'ફળ આવવું', 'પરિપક્વ', 'કાપણી']
  };

  // Soil type options
  const soilTypeOptions = {
    english: ['Loamy', 'Sandy', 'Clay', 'Silt', 'Peaty', 'Chalky', 'Saline'],
    hindi: ['दोमट', 'बलुई', 'चिकनी', 'गाद', 'पीट', 'चूना युक्त', 'नमकीन'],
    marathi: ['चिकणमाती', 'वाळूची जमीन', 'चिकणमाती', 'गाळ', 'पीट', 'खडूदार', 'खारट'],
    gujarati: ['ચિકણી', 'રેતાળ', 'માટી', 'ગાદી', 'પીટ', 'ચૂનાળા', 'ખારા']
  };

  // Get translated text based on language
  const t = (key) => {
    const translations = {
      // Navigation
      'diagnosis': {
        english: 'Diagnosis',
        hindi: 'निदान',
        marathi: 'निदान',
        gujarati: 'રોગનિદાન'
      },
      'history': {
        english: 'History',
        hindi: 'इतिहास',
        marathi: 'इतिहास',
        gujarati: 'ઇતિહાસ'
      },
      'viewHistory': {
        english: 'View History',
        hindi: 'इतिहास देखें',
        marathi: 'इतिहास पहा',
        gujarati: 'ઇતિહાસ જુઓ'
      },
      'newDiagnosis': {
        english: 'New Diagnosis',
        hindi: 'नया निदान',
        marathi: 'नवीन निदान',
        gujarati: 'નવું નિદાન'
      },
      
      // Result section
      'result': {
        english: 'Result',
        hindi: 'परिणाम',
        marathi: 'परिणाम',
        gujarati: 'પરિણામ'
      },
      'identifiedIssue': {
        english: 'Identified Issue',
        hindi: 'पहचानी गई समस्या',
        marathi: 'ओळखलेली समस्या',
        gujarati: 'ઓળખાયેલી સમસ્યા'
      },
      'similarPastCases': {
        english: 'Similar Past Cases',
        hindi: 'पिछले समान मामले',
        marathi: 'मागील तत्सम प्रकरणे',
        gujarati: 'સમાન ભૂતકાળના કેસો'
      },
      'recommendations': {
        english: 'Recommendations',
        hindi: 'सिफारिशें',
        marathi: 'शिफारसी',
        gujarati: 'ભલામણો'
      },
      'severity': {
        english: 'Severity',
        hindi: 'गंभीरता',
        marathi: 'गंभीरता',
        gujarati: 'ગંભીરતા'
      },
      'treatment': {
        english: 'Treatment',
        hindi: 'उपचार',
        marathi: 'उपचार',
        gujarati: 'ઉપચાર'
      },
      'confidence': {
        english: 'Confidence',
        hindi: 'विश्वास',
        marathi: 'आत्मविश्वास',
        gujarati: 'આત્મવિશ્વાસ'
      },
      'weatherConditions': {
        english: 'Weather Conditions',
        hindi: 'मौसम की स्थिति',
        marathi: 'हवामान परिस्थिती',
        gujarati: 'હવામાનની સ્થિતિ'
      },
      'temperature': {
        english: 'Temperature',
        hindi: 'तापमान',
        marathi: 'तापमान',
        gujarati: 'તાપમાન'
      },
      'humidity': {
        english: 'Humidity',
        hindi: 'नमी',
        marathi: 'आर्द्रता',
        gujarati: 'આર્દ્રતા'
      },
      'conditions': {
        english: 'Conditions',
        hindi: 'स्थितियां',
        marathi: 'परिस्थिती',
        gujarati: 'પરિસ્થિતિઓ'
      },
      'uvIndex': {
        english: 'UV Index',
        hindi: 'यूवी सूचकांक',
        marathi: 'यूव्ही निर्देशांक',
        gujarati: 'યુવી ઇન્ડેક્સ'
      },
      'weatherDataNotAvailable': {
        english: 'Weather data not available',
        hindi: 'मौसम का डेटा उपलब्ध नहीं है',
        marathi: 'हवामान डेटा उपलब्ध नाही',
        gujarati: 'હવામાનનો ડેટા ઉપલબ્ધ નથી'
      },
      
      // Form labels
      'title': {
        english: 'Crop Health Diagnosis',
        hindi: 'फसल स्वास्थ्य निदान',
        marathi: 'पीक आरोग्य निदान',
        gujarati: 'કર્પ સ્વાસ્થ્ય નિદાન'
      },
      'subtitle': {
        english: 'Upload an image of your crop to diagnose any health issues.',
        hindi: 'किसी भी स्वास्थ्य समस्या का निदान करने के लिए अपनी फसल की एक छवि अपलोड करें।',
        marathi: 'कोणत्याही आरोग्य समस्येचे निदान करण्यासाठी आपल्या पिकाची प्रतिमा अपलोड करा.',
        gujarati: 'કોઈપણ આરોગ્ય સમસ્યાનું નિદાન કરવા માટે તમારી પાકની છબી અપલોડ કરો.'
      },
      'formTitle': {
        english: 'Crop Information',
        hindi: 'फसल की जानकारी',
        marathi: 'पीक माहिती',
        gujarati: 'પાકની માહિતી'
      },
      'cropType': {
        english: 'Crop Type',
        hindi: 'फसल का प्रकार',
        marathi: 'पिकाचा प्रकार',
        gujarati: 'પાકનો પ્રકાર'
      },
      'growthStage': {
        english: 'Growth Stage',
        hindi: 'विकास का चरण',
        marathi: 'वाढीचा टप्पा',
        gujarati: 'વિકાસનો તબક્કો'
      },
      'soilType': {
        english: 'Soil Type',
        hindi: 'मिट्टी का प्रकार',
        marathi: 'मातीचा प्रकार',
        gujarati: 'માટીનો પ્રકાર'
      },
      'location': {
        english: 'Location',
        hindi: 'स्थान',
        marathi: 'स्थान',
        gujarati: 'સ્થાન'
      },
      'additionalNotes': {
        english: 'Additional Notes',
        hindi: 'अतिरिक्त नोट्स',
        marathi: 'अतिरिक्त नोंदी',
        gujarati: 'વધારાની નોંધો'
      },
      'requiredField': {
        english: 'This field is required',
        hindi: 'यह फ़ील्ड आवश्यक है',
        marathi: 'हे फील्ड आवश्यक आहे',
        gujarati: 'આ ક્ષેત્ર જરૂરી છે'
      },
      'analyzeButton': {
        english: 'Analyze Image',
        hindi: 'छवि का विश्लेषण करें',
        marathi: 'प्रतिमेचे विश्लेषण करा',
        gujarati: 'છબીનું વિશ્લેષણ કરો'
      },
      'loading': {
        english: 'Analyzing...',
        hindi: 'विश्लेषण किया जा रहा है...',
        marathi: 'विश्लेषण करत आहे...',
        gujarati: 'વિશ્લેષણ થાય છે...'
      },
      'select': {
        english: 'Select',
        hindi: 'चुनें',
        marathi: 'निवडा',
        gujarati: 'પસંદ કરો'
      }
    };
    
    const keys = key.split('.');
    let value = translations;
    
    for (const k of keys) {
      if (value[k] === undefined) return key; // Return key if translation not found
      value = value[k];
    }
    
    return value[language] || value.english || key;
  };

  // Load diagnosis history from localStorage on component mount
  useEffect(() => {
    const loadHistory = async () => {
      try {
        const savedHistory = localStorage.getItem(`diagnosisHistory_${user?.id}`);
        if (savedHistory) {
          setDiagnosisHistory(JSON.parse(savedHistory));
        }
        
        // Load mock weather data
        const loadWeatherData = async () => {
          try {
            // In a real app, you would call a weather API here
            // Mock weather data
            setWeatherData({
              temperature: '25°C',
              humidity: '65%',
              conditions: 'Partly Cloudy',
              uvIndex: '5'
            });
          } catch (error) {
            console.error('Error loading weather data:', error);
          }
        };
        
        await loadWeatherData();
      } catch (err) {
        console.error('Error loading diagnosis history:', err);
        setDiagnosisHistory([]);
      }
    };
    
    loadHistory();
  }, [user?.id]);
  
  const toggleView = useCallback(() => {
    if (showHistory) {
      // Reset form when switching back to diagnosis
      reset();
      setPreviewUrl('');
      setImageFile(null);
      setResult(null);
      setSimilarDiagnoses([]);
    }
    setShowHistory(prev => !prev);
  }, [showHistory, reset]);

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={() => navigate(-1)}
            className="flex items-center text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="h-5 w-5 mr-1" />
            Back
          </button>
          
          <button
            onClick={toggleHistory}
            className={`flex items-center px-4 py-2 rounded-md ${
              showHistory 
                ? 'bg-green-100 text-green-800' 
                : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
            }`}
          >
            <History className="h-5 w-5 mr-2" />
            {showHistory ? t('diagnosis') : t('history')}
          </button>
        </div>
        
        {showHistory ? (
          <div className="bg-white shadow rounded-lg overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6">
                <History className="inline-block h-5 w-5 mr-2 text-green-600" />
                {t('history')}
              </h2>
              <DiagnosisHistory />
            </div>
          </div>
        ) : (
          <div className="bg-white shadow rounded-lg overflow-hidden">
            <div className="p-6">
              <h1 className="text-2xl font-bold text-gray-900 mb-6">
                <SearchCheck className="inline-block h-6 w-6 mr-2 text-green-600" />
                {t('diagnosis')}
              </h1>
              {!result ? (
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h1 className="text-2xl font-bold text-gray-800 mb-2">{t('title')}</h1>
                  <p className="text-gray-600 mb-6">{t('subtitle')}</p>

                  {/* Image Upload */}
                  <div className="mb-6">
                    <ImageUploader
                      onImageUpload={handleImageUpload}
                      onRemoveImage={handleRemoveImage}
                      previewUrl={previewUrl}
                      className="w-full h-64"
                    />
                  </div>

                  {/* Crop Information Form */}
                  <div className="mb-6">
                    <h2 className="text-lg font-semibold text-gray-800 mb-4">{t('formTitle')}</h2>
                    <form onSubmit={handleSubmit(analyzeImage)} className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {t('cropType')} <span className="text-red-500">*</span>
                        </label>
                        <select
                          {...register('cropType')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
                        >
                          <option value="">-- {language === 'hindi' ? 'चुनें' : language === 'marathi' ? 'निवडा' : language === 'gujarati' ? 'પસંદ કરો' : 'Select'} --</option>
                          {cropOptions[language]?.map((crop, index) => (
                            <option key={index} value={crop}>
                              {crop} ({cropOptions.english[index]})
                            </option>
                          ))}
                        </select>
                        {errors.cropType && (
                          <p className="mt-1 text-sm text-red-600">{t('requiredField')}</p>
                        )}
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {t('growthStage')} <span className="text-red-500">*</span>
                        </label>
                        <select
                          {...register('growthStage')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
                        >
                          <option value="">-- {language === 'hindi' ? 'चुनें' : language === 'marathi' ? 'निवडा' : language === 'gujarati' ? 'પસંદ કરો' : 'Select'} --</option>
                          {growthStageOptions[language]?.map((stage, index) => (
                            <option key={index} value={stage}>
                              {stage} ({growthStageOptions.english[index]})
                            </option>
                          ))}
                        </select>
                        {errors.growthStage && (
                          <p className="mt-1 text-sm text-red-600">{t('requiredField')}</p>
                        )}
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {t('soilType')} <span className="text-red-500">*</span>
                        </label>
                        <select
                          {...register('soilType')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
                        >
                          <option value="">-- {language === 'hindi' ? 'चुनें' : language === 'marathi' ? 'निवडा' : language === 'gujarati' ? 'પસંદ કરો' : 'Select'} --</option>
                          {soilTypeOptions[language]?.map((soil, index) => (
                            <option key={index} value={soil}>
                              {soil} ({soilTypeOptions.english[index]})
                            </option>
                          ))}
                        </select>
                        {errors.soilType && (
                          <p className="mt-1 text-sm text-red-600">{t('requiredField')}</p>
                        )}
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {t('location')} <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          {...register('location')}
                          placeholder={language === 'hindi' ? 'आपका स्थान' : language === 'marathi' ? 'तुमचे स्थान' : language === 'gujarati' ? 'તમારું સ્થાન' : 'Your location'}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
                        />
                        {errors.location && (
                          <p className="mt-1 text-sm text-red-600">{t('requiredField')}</p>
                        )}
                      </div>

                      {error && (
                        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                          <div className="flex">
                            <div className="flex-shrink-0">
                              <AlertCircle className="h-5 w-5 text-red-500" />
                            </div>
                            <div className="ml-3">
                              <p className="text-sm text-red-700">{error}</p>
                            </div>
                          </div>
                        </div>
                      )}

                      <button
                        type="submit"
                        disabled={isAnalyzing || !imageFile}
                        className={`w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 ${(!imageFile || isAnalyzing) ? 'opacity-50 cursor-not-allowed' : ''}`}
                      >
                        {isAnalyzing ? (
                          <div className="flex items-center justify-center">
                            <Loader2 className="animate-spin h-5 w-5 mr-2" />
                            {t('loading')}
                          </div>
                        ) : (
                          t('analyzeButton')
                        )}
                      </button>
                    </form>
                  </div>
                </div>
              ) : showHistory ? (
                <DiagnosisHistory 
                  onSelectDiagnosis={(diagnosis) => {
                    // Pre-fill form with selected diagnosis
                    reset({
                      cropType: diagnosis.diagnosis.crop_type,
                      growthStage: diagnosis.diagnosis.growth_stage,
                      soilType: diagnosis.diagnosis.soil_type,
                      location: diagnosis.diagnosis.location,
                      additionalNotes: diagnosis.diagnosis.additional_notes
                    });
                    setPreviewUrl(diagnosis.image_url);
                    setShowHistory(false);
                  }}
                  onProvideFeedback={handleFeedback}
                />
              ) : (
                <div className="space-y-8">
                  {/* Similar past cases */}
                  {similarDiagnoses.length > 0 && (
                    <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r">
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <Lightbulb className="h-5 w-5 text-blue-500" />
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-blue-800">
                            {t('similarPastCases')}
                          </h3>
                          <div className="mt-2 text-sm text-blue-700">
                            <p>{t('similarPastCasesDescription')}</p>
                            <div className="mt-2 space-y-2">
                              {similarDiagnoses.slice(0, 3).map((item, index) => (
                                <div key={index} className="p-2 bg-blue-100 rounded">
                                  <div className="font-medium">{item.diagnosis.disease}</div>
                                  <div className="text-xs text-blue-600">
                                    {new Date(item.timestamp).toLocaleDateString()} • {item.diagnosis.confidence?.toFixed(2)} confidence
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <Lightbulb className="h-5 w-5 text-blue-400" />
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-blue-800">
                            {t('similarPastCases')}
                          </h3>
                          <div className="mt-2 text-sm text-blue-700">
                            <ul className="list-disc pl-5 space-y-1">
                              {similarDiagnoses.map((item, index) => (
                                <li key={index}>
                                  {item.diagnosis?.issue} - {new Date(item.timestamp).toLocaleDateString()}
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Main diagnosis result */}
                  <div className="bg-white rounded-lg shadow overflow-hidden">
                    <div className="px-6 py-5 border-b border-gray-200">
                      <h2 className="text-xl font-semibold text-gray-900">{t('diagnosis')} {t('result')}</h2>
                    </div>
                    
                    <div className="p-6">
                      <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-6 rounded-r">
                        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
                          <div className="px-4 py-5 sm:px-6 bg-gray-50 flex justify-between items-center">
                            <div>
                              <h3 className="text-lg leading-6 font-medium text-gray-900">
                                {t('result')}
                              </h3>
                              <p className="mt-1 text-sm text-gray-500">
                                {new Date().toLocaleDateString()}
                              </p>
                            </div>
                            <button
                              onClick={toggleView}
                              className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                            >
                              <History className="h-3 w-3 mr-1" />
                              {t('viewHistory')}
                            </button>
                          </div>
                          <div className="border-t border-gray-200 px-4 py-5 sm:p-0">
                            <dl className="sm:divide-y sm:divide-gray-200">
                              <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt className="text-sm font-medium text-gray-500">
                                  {t('identifiedIssue')}
                                </dt>
                                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                  <div className="flex items-center">
                                    <span className="font-medium">{result.issue}</span>
                                    <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                      {t('confidence')}: {(result.confidence * 100).toFixed(0)}%
                                    </span>
                                  </div>
                                  {similarDiagnoses.length > 0 && (
                                    <div className="mt-1 text-xs text-gray-500">
                                      Based on analysis of your crop and {similarDiagnoses.length} similar cases
                                    </div>
                                  )}
                                </dd>
                              </div>
                              <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt className="text-sm font-medium text-gray-500">
                                  {t('severity')}
                                </dt>
                                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                    result.severity === 'Low' ? 'bg-green-100 text-green-800' :
                                    result.severity === 'Moderate' ? 'bg-yellow-100 text-yellow-800' :
                                    'bg-red-100 text-red-800'
                                  }`}>
                                    {result.severity}
                                  </span>
                                </dd>
                              </div>
                              <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt className="text-sm font-medium text-gray-500">
                                  {t('recommendations')}
                                </dt>
                                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                  <ul className="list-disc pl-5 space-y-2">
                                    {result.recommendations.map((rec, idx) => (
                                      <li key={idx} className="flex items-start">
                                        <CheckCircle className="h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                                        <span>{rec}</span>
                                      </li>
                                    ))}
                                  </ul>
                                </dd>
                              </div>
                              <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt className="text-sm font-medium text-gray-500">
                                  {t('treatment')}
                                </dt>
                                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                  <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                                    <div className="flex">
                                      <div className="flex-shrink-0">
                                        <AlertTriangle className="h-5 w-5 text-yellow-400" />
                                      </div>
                                      <div className="ml-3">
                                        <p className="text-sm text-yellow-700">
                                          {result.treatment}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </dd>
                              </div>
                            </dl>
                          </div>
                          
                          {/* Feedback section */}
                          <div className="bg-gray-50 px-4 py-4 sm:px-6 sm:flex sm:flex-row-reverse">
                            <div className="space-x-2">
                              <button
                                onClick={() => handleFeedback(result.id, true)}
                                className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                              >
                                <CheckCircle className="h-4 w-4 mr-1" />
                                {t('feedback.helpful')}
                              </button>
                              <button
                                onClick={() => {
                                  const comment = prompt('What was inaccurate?');
                                  if (comment !== null) {
                                    handleFeedback(result.id, false, comment);
                                  }
                                }}
                                className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                              >
                                <AlertCircle className="h-4 w-4 mr-1" />
                                {t('feedback.notHelpful')}
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Weather conditions */}
                  <div className="bg-white rounded-lg shadow overflow-hidden">
                    <div className="px-6 py-5 border-b border-gray-200">
                      <h2 className="text-xl font-semibold text-gray-900">
                        {t('weatherConditions')}
                      </h2>
                    </div>
                    
                    <div className="p-6">
                      {weatherData ? (
                        <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex items-center">
                              <Thermometer className="h-5 w-5 text-gray-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900">
                                {t('temperature')}
                              </span>
                            </div>
                            <p className="mt-1 text-2xl font-semibold text-gray-900">
                              {weatherData.temperature}°C
                            </p>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex items-center">
                              <Droplets className="h-5 w-5 text-blue-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900">
                                {t('humidity')}
                              </span>
                            </div>
                            <p className="mt-1 text-2xl font-semibold text-gray-900">
                              {weatherData.humidity}%
                            </p>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex items-center">
                              <Cloud className="h-5 w-5 text-gray-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900">
                                {t('conditions')}
                              </span>
                            </div>
                            <p className="mt-1 text-lg font-medium text-gray-900">
                              {weatherData.conditions}
                            </p>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex items-center">
                              <Sun className="h-5 w-5 text-yellow-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900">
                                {t('uvIndex')}
                              </span>
                            </div>
                            <p className="mt-1 text-2xl font-semibold text-gray-900">
                              {weatherData.uvIndex}
                            </p>
                          </div>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-500">{t('weatherDataNotAvailable')}</p>
                      )}
                    </div>
                  </div>

                  {/* Action buttons */}
                  <div className="flex justify-between">
                    <button
                      type="button"
                      onClick={toggleHistory}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      <History className="-ml-1 mr-2 h-5 w-5 text-gray-500" />
                      {t('viewHistory')}
                    </button>
                    
                    <button
                      type="button"
                      onClick={() => {
                        setResult(null);
                        setImageFile(null);
                        setPreviewUrl('');
                        setSimilarDiagnoses([]);
                      }}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      {t('newDiagnosis')}
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CropDiagnosis;
